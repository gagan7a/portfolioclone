document.addEventListener("DOMContentLoaded", function () {initializePortfolio();});const passiveIfSupported = supportsPassive() ? {passive: true} : false;function supportsPassive() {let supportsPassive = false;try {const opts = Object.defineProperty({}, 'passive', {get: function() {supportsPassive = true;}});window.addEventListener("testPassive", null, opts);window.removeEventListener("testPassive", null, opts);} catch (e) {} return supportsPassive;} function initializePortfolio() {handleLoading();setupNavigation();setupScrollEffects();setupAnimations();setupContactForm();setupBackToTop();setupThemeHandling();setupResumeModal();optimizeImages();} function handleLoading() {const loader = document.getElementById("loader");window.addEventListener("load", function () {setTimeout(function () {loader.classList.add("hidden");triggerEntranceAnimations();}, 1200);});} function setupNavigation() {const mobileMenu = document.getElementById("mobile-menu");const navLinks = document.getElementById("nav-links");const header = document.getElementById("header");mobileMenu.addEventListener("click", function () {toggleMobileMenu(mobileMenu, navLinks);});const navLinkItems = navLinks.querySelectorAll("a");navLinkItems.forEach((link) => {link.addEventListener("click", function () {closeMobileMenu(mobileMenu, navLinks);});});document.addEventListener("click", function (event) {const isClickInsideNav = mobileMenu.contains(event.target) || navLinks.contains(event.target);if (!isClickInsideNav && navLinks.classList.contains("active")) {closeMobileMenu(mobileMenu, navLinks);}});setupSmoothScrolling();} function toggleMobileMenu(menuButton, navLinks) {menuButton.classList.toggle("active");navLinks.classList.toggle("active");const expanded = menuButton.getAttribute("aria-expanded") === "true" || false;menuButton.setAttribute("aria-expanded", !expanded);document.body.style.overflow = navLinks.classList.contains("active") ? "hidden" : "";} function closeMobileMenu(menuButton, navLinks) {menuButton.classList.remove("active");navLinks.classList.remove("active");menuButton.setAttribute("aria-expanded", "false");document.body.style.overflow = "";} function setupSmoothScrolling() {document.querySelectorAll('a[href^="#"]').forEach((anchor) => {anchor.addEventListener("click", function (e) {e.preventDefault();const target = document.querySelector(this.getAttribute("href"));if (target) {const headerOffset = 80;const elementPosition = target.getBoundingClientRect().top;const offsetPosition = elementPosition + window.pageYOffset - headerOffset;window.scrollTo({top: offsetPosition, behavior: "smooth",});}});});} function setupScrollEffects() {const header = document.getElementById("header");const sections = document.querySelectorAll(".section");const navLinks = document.querySelectorAll(".nav-links a");let ticking = false;window.addEventListener("scroll", function () {if (!ticking) {requestAnimationFrame(function () {handleHeaderScroll(header);handleActiveNavigation(sections, navLinks);ticking = false;});ticking = true;}});} function handleHeaderScroll(header) {if (window.scrollY > 50) {header.classList.add("scrolled");} else {header.classList.remove("scrolled");}} function handleActiveNavigation(sections, navLinks) {const scrollPos = window.scrollY + 100;sections.forEach((section, index) => {const top = section.offsetTop;const bottom = top + section.offsetHeight;if (scrollPos >= top && scrollPos <= bottom) {navLinks.forEach((link) => link.classList.remove("active"));if (navLinks[index]) {navLinks[index].classList.add("active");}}});} function setupAnimations() {const observerOptions = {threshold: 0.1, rootMargin: "0px 0px -50px 0px",};const observer = new IntersectionObserver(function (entries) {entries.forEach((entry) => {if (entry.isIntersecting) {entry.target.classList.add("animate-in");if (entry.target.classList.contains("stagger-animation")) {staggerChildAnimations(entry.target);}}});}, observerOptions);const animatedElements = document.querySelectorAll( ".project-card, .service-card, .skill-category", );animatedElements.forEach((el) => {el.classList.add("animate-on-scroll");observer.observe(el);});} function triggerEntranceAnimations() {const heroContent = document.querySelector(".hero-content");if (heroContent) {heroContent.classList.add("animate-in");}} function staggerChildAnimations(parent) {const children = parent.children;Array.from(children).forEach((child, index) => {setTimeout(() => {child.classList.add("animate-in");}, index * 100);});} function setupContactForm() {const form = document.getElementById("contact-form");const submitButton = form.querySelector('button[type="submit"]');if (!form) return;setupEmailDomainValidation();form.addEventListener("submit", function (e) {e.preventDefault();handleFormSubmission(form, submitButton);});setupFormValidation(form);} function setupEmailDomainValidation() {const allowedDomains = [ "gmail.com", "yahoo.com", "outlook.com", "hotmail.com", "protonmail.com", "icloud.com", ];const emailInput = document.getElementById("email");const warning = document.getElementById("email-warning");const form = document.getElementById("contact-form");if (!emailInput || !warning || !form) return;emailInput.addEventListener("input", function () {const email = emailInput.value;const domain = email.substring(email.lastIndexOf("@") + 1);if (email && !allowedDomains.includes(domain)) {warning.style.display = "block";emailInput.setCustomValidity("Invalid email domain.");} else {warning.style.display = "none";emailInput.setCustomValidity("");}});form.addEventListener("submit", function (e) {const email = emailInput.value;const domain = email.substring(email.lastIndexOf("@") + 1);if (email && !allowedDomains.includes(domain)) {e.preventDefault();warning.style.display = "block";showNotification( "Submission blocked: Only trusted email domains allowed.", "error", );return false;}});} function handleFormSubmission(form, submitButton) {const originalText = submitButton.innerHTML;const formData = new FormData(form);if (!validateForm(form)) {showNotification( "Please fill in all required fields correctly.", "error", );return;} submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';submitButton.disabled = true;fetch(form.action, {method: "POST", body: formData, headers: {Accept: "application/json",},}) .then((response) => {if (response.ok) {showNotification( "Message sent successfully! I'll get back to you soon.", "success", );form.reset();} else {throw new Error("Network response was not ok");}}) .catch((error) => {console.error("Error:", error);showNotification( "There was a problem sending your message. Please try again later.", "error", );}) .finally(() => {submitButton.innerHTML = originalText;submitButton.disabled = false;});} function setupFormValidation(form) {const inputs = form.querySelectorAll("input, textarea");inputs.forEach((input) => {input.addEventListener("blur", function () {validateField(this);});input.addEventListener("input", function () {clearFieldError(this);});});} function validateForm(form) {const inputs = form.querySelectorAll("input[required], textarea[required]");let isValid = true;inputs.forEach((input) => {if (!validateField(input)) {isValid = false;}});return isValid;} function validateField(field) {const value = field.value.trim();const fieldType = field.type;let isValid = true;let errorMessage = "";if (field.hasAttribute("required") && !value) {isValid = false;errorMessage = "This field is required.";} if (fieldType === "email" && value) {const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;if (!emailRegex.test(value)) {isValid = false;errorMessage = "Please enter a valid email address.";}} if (field.name === "name" && value) {const nameRegex = /^[a-zA-Z\s]+$/;if (!nameRegex.test(value)) {isValid = false;errorMessage = "Name should only contain letters and spaces.";}} if (!isValid) {showFieldError(field, errorMessage);} else {clearFieldError(field);} return isValid;} function showFieldError(field, message) {clearFieldError(field);field.classList.add("error");const errorElement = document.createElement("span");errorElement.className = "field-error";errorElement.textContent = message;field.parentNode.appendChild(errorElement);} function clearFieldError(field) {field.classList.remove("error");const existingError = field.parentNode.querySelector(".field-error");if (existingError) {existingError.remove();}} function showNotification(message, type = "info") {const notification = document.createElement("div");notification.className = `notification notification-${type}`;notification.innerHTML = ` <div class="notification-content"> <i class="fas fa-${getNotificationIcon(type)}"></i> <span>${message}</span> </div> <button class="notification-close">&times;</button> `;document.body.appendChild(notification);setTimeout(() => notification.classList.add("show"), 100);setTimeout(() => hideNotification(notification), 5000);notification .querySelector(".notification-close") .addEventListener("click", () => {hideNotification(notification);});} function hideNotification(notification) {notification.classList.add("hide");setTimeout(() => {if (notification.parentNode) {notification.parentNode.removeChild(notification);}}, 300);} function getNotificationIcon(type) {const icons = {success: "check-circle", error: "exclamation-circle", warning: "exclamation-triangle", info: "info-circle",};return icons[type] || icons.info;} function setupBackToTop() {const backToTopButton = document.getElementById("back-to-top");if (!backToTopButton) return;window.addEventListener("scroll", function () {if (window.scrollY > 300) {backToTopButton.classList.add("visible");} else {backToTopButton.classList.remove("visible");}});backToTopButton.addEventListener("click", function () {window.scrollTo({top: 0, behavior: "smooth",});});} function setupThemeHandling() {const savedTheme = localStorage.getItem("theme") || "dark";document.documentElement.setAttribute("data-theme", savedTheme);window.toggleTheme = function () {const currentTheme = document.documentElement.getAttribute("data-theme");const newTheme = currentTheme === "dark" ? "light" : "dark";document.documentElement.setAttribute("data-theme", newTheme);localStorage.setItem("theme", newTheme);};} function debounce(func, wait) {let timeout;return function executedFunction(...args) {const later = () => {clearTimeout(timeout);func(...args);};clearTimeout(timeout);timeout = setTimeout(later, wait);};} function throttle(func, limit) {let inThrottle;return function () {const args = arguments;const context = this;if (!inThrottle) {func.apply(context, args);inThrottle = true;setTimeout(() => (inThrottle = false), limit);}};} const debouncedScroll = debounce(function () {}, 250);const throttledScroll = throttle(function () {}, 16);window.addEventListener("scroll", debouncedScroll);window.addEventListener("scroll", throttledScroll);window.addEventListener("error", function (e) {console.error("JavaScript error:", e.error);});function enhanceAccessibility() {const skipLink = document.createElement("a");skipLink.href = "#main-content";skipLink.className = "skip-link";skipLink.textContent = "Skip to main content";document.body.insertBefore(skipLink, document.body.firstChild);document.addEventListener("keydown", function (e) {if (e.key === "Escape") {const mobileMenu = document.getElementById("mobile-menu");const navLinks = document.getElementById("nav-links");if (navLinks.classList.contains("active")) {closeMobileMenu(mobileMenu, navLinks);}}});} document.addEventListener("DOMContentLoaded", enhanceAccessibility);function setupResumeModal() {const resumeLink = document.getElementById("resume-link");const resumeModal = document.getElementById("resume-modal");const closeResumeButton = document.getElementById("close-resume");if (!resumeLink || !resumeModal || !closeResumeButton) return;resumeLink.addEventListener("click", function (e) {e.preventDefault();openResumeModal();});closeResumeButton.addEventListener("click", function () {closeResumeModal();});resumeModal.addEventListener("click", function (e) {if (e.target === resumeModal) {closeResumeModal();}});document.addEventListener("keydown", function (e) {if (e.key === "Escape" && resumeModal.classList.contains("active")) {closeResumeModal();}});} function openResumeModal() {const resumeModal = document.getElementById("resume-modal");if (resumeModal) {resumeModal.classList.add("active");document.body.style.overflow = "hidden";}} function closeResumeModal() {const resumeModal = document.getElementById("resume-modal");if (resumeModal) {resumeModal.classList.remove("active");document.body.style.overflow = "";}} if (typeof module !== "undefined" && module.exports) {module.exports = {validateField, validateForm, showNotification, debounce, throttle,};} const phrases = [ "Freelance Data Analyst", "Power BI Developer", "Excel Dashboard Specialist", "Data Cleaning Expert", "Python + AI Analyst", ];let currentPhrase = 0;let currentChar = 0;let isDeleting = false;const typeSpeed = 100;const eraseSpeed = 50;const delayBetween = 1500;const el = document.querySelector(".typewriter-text");function type() {const phrase = phrases[currentPhrase];if (el) {el.textContent = phrase.slice(0, currentChar);} if (!isDeleting) {if (currentChar < phrase.length) {currentChar++;setTimeout(type, typeSpeed);} else {isDeleting = true;setTimeout(type, delayBetween);}} else {if (currentChar > 0) {currentChar--;setTimeout(type, eraseSpeed);} else {isDeleting = false;currentPhrase = (currentPhrase + 1) % phrases.length;setTimeout(type, typeSpeed);}}} document.addEventListener("DOMContentLoaded", type);

function optimizeImages() {
    const images = document.querySelectorAll('img[loading="lazy"]');
    
    // Create intersection observer for better lazy loading
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                
                // Set background immediately to prevent white flash
                img.style.background = 'var(--dark-secondary)';
                
                // Preload image
                const tempImg = new Image();
                tempImg.onload = () => {
                    img.src = img.src;
                    img.classList.add('loaded');
                    img.style.background = 'transparent';
                };
                tempImg.onerror = () => {
                    img.style.background = 'var(--dark-secondary)';
                };
                tempImg.src = img.src;
                
                observer.unobserve(img);
            }
        });
    }, {
        rootMargin: '100px 0px',
        threshold: 0.01
    });
    
    images.forEach(img => {
        // Set initial background
        img.style.background = 'var(--dark-secondary)';
        imageObserver.observe(img);
    });
}
